"""
PROBLEM

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n-1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n-1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

ANSWER: 1533776805
Solve time: ~0.6 seconds
"""

import unittest
from util.utils import timeit


class Problem45:
    def __init__(self, max_tri, max_penta, max_hexa, occurrence):
        self.max_tri = max_tri
        self.max_penta = max_penta
        self.max_hexa = max_hexa
        self.occurrence = occurrence
        self.ans = None

    @timeit
    def generate_triangle_numbers(self):
        return {int(i * (i + 1) / 2) for i in range(1, self.max_penta)}

    @timeit
    def generate_pentagonal_numbers(self):
        return {int(i * (3 * i - 1) / 2) for i in range(1, self.max_penta)}

    @timeit
    def generate_hexa_numbers(self):
        return {int(i * (2 * i - 1)) for i in range(1, self.max_penta)}

    @timeit
    def solve(self):
        t = self.generate_triangle_numbers()
        p = self.generate_pentagonal_numbers()
        h = self.generate_hexa_numbers()

        union = list(t & p & h)
        union.sort()
        self.ans = union[self.occurrence]
        return self.ans

    def get_solution(self):
        return self.ans


class Solution45(unittest.TestCase):
    def setUp(self):
        self.problem = Problem45(max_tri=300000, max_penta=300000, max_hexa=300000, occurrence=2)

    def test_solution(self):
        self.assertEqual(1533776805, self.problem.solve())


if __name__ == '__main__':
    unittest.main()
